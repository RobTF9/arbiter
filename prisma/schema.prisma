// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model linked to Clerk authentication
model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique // External ID from Clerk
  lists     List[]
}

// List model
model List {
  id          String     @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  reputation  Int        @default(0)
  rating Int        @default(0)
  credits Int        @default(1000)
  gang String

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  characters  Character[]
  messages    Message[]

  @@index([userId])
}

model Character {
  id String @id @default(uuid())
  name String @unique
  listId String
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  movement Int
  weaponSkill Int
  ballisticSkill Int
  strength Int
  toughness Int
  attacks Int
  initiative Int
  willpower Int
  intelligence Int
  wounds Int
  leaderShip Int
  cool Int
  points Int
  profile String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  xp Int @default(0)

  wargear Wargear[]
  weapons Weapon[]
  injuries Injury[]
  skills Skill[]
  advancements Advancement[]

  notes String?

  @@index([listId])
  @@unique([name, listId])
}

model Wargear {
  id String @id @default(uuid())
  name String
  credits Int
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type String
  rarity String

  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([characterId])
  @@unique([name, characterId])
}

model Weapon {
  id String @id @default(uuid())
  name String
  credits Int
  traits String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type String
  rarity String
  strength String
  damage Int
  shortRange Int
  shortRangeModifier Int
  longRangeModifier Int
  longRange Int
  ammo Int
  armorPiercing Int

  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([characterId])
  @@unique([name, characterId])
}

model Injury {
  id String @id @default(uuid())
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([characterId])
  @@unique([name, characterId])
}

model Skill {
  id String @id @default(uuid())
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  advancementId String? @unique
  advancement Advancement? @relation(fields: [advancementId], references: [id], onDelete: Cascade)


  @@index([name])
  @@index([characterId])
  @@unique([name, characterId])
}

model Advancement {
  id String @id @default(uuid())
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cost Int
  xp Int
  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  skill Skill?


  @@index([name])
  @@index([characterId])
  @@unique([name, characterId])
}

model Message {
  id String @id @default(uuid())
  listId String
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  message String
  sources String?
  createdAt DateTime @default(now())
  status MessageStatus @default(PENDING)
  source MessageSource @default(USER)
}

enum MessageStatus {
  PENDING
  SUCCESS
  ERROR
}

enum MessageSource {
  USER
  SYSTEM
  AI
  ERROR
}